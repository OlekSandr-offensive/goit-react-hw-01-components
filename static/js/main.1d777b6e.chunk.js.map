{"version":3,"sources":["components/Profile/Profile.jsx","components/Statistics/Statistics.jsx","components/FriendList/FriendList.jsx","components/TransactionHistory/TransactionHistory.jsx","App.jsx","index.js"],"names":["Profile","name","tag","location","avatar","stats","followers","views","likes","className","src","alt","Statistics","title","getRandomRgbNum","Math","floor","random","toUpperCase","map","stat","style","backgroundColor","label","percentage","id","FriendList","friends","friend","isOnline","background","width","propsTypes","PropTypes","arrayOf","shape","string","isRequired","TransactionHistory","items","item","type","charAt","slice","amount","currency","App","user","statisticalData","transactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d777b6e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Profile.scss';\n\nconst Profile = ({ name, tag, location, avatar, stats }) => {\n  const { followers, views, likes } = stats;\n  return (\n    <div className=\"profile\">\n      <div className=\"description\">\n        <img src={avatar} alt=\"Аватар пользователя\" className=\"avatar\" />\n        <p className=\"name\">{name}</p>\n        <p className=\"tag\">@{tag}</p>\n        <p className=\"location\">{location}</p>\n      </div>\n\n      <ul className=\"stats\">\n        <li>\n          <span className=\"label\">Followers</span>\n          <span className=\"quantity\">{followers}</span>\n        </li>\n        <li>\n          <span className=\"label\">Views</span>\n          <span className=\"quantity\">{views}</span>\n        </li>\n        <li>\n          <span className=\"label\">Likes</span>\n          <span className=\"quantity\">{likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  name: PropTypes.string,\n  tag: PropTypes.string,\n  location: PropTypes.string,\n  avatar: PropTypes.string,\n  stats: PropTypes.object,\n};\n\nexport default Profile;\n","import PropTypes from 'prop-types';\nimport './Statistics.scss';\n\nconst Statistics = ({ title, stats }) => {\n  const min = 0;\n  const max = 255;\n  const getRandomRgbNum = () => Math.floor(Math.random() * (max - min) + min);\n  return (\n    <section className=\"statistics\">\n      <h2 className=\"title\">{title.toUpperCase()}</h2>\n\n      <ul className=\"stat-list\">\n        {stats.map(stat => (\n          <li\n            key={stat.id}\n            className=\"item\"\n            style={{\n              backgroundColor: `rgb(${getRandomRgbNum()},${getRandomRgbNum()},${getRandomRgbNum()})`,\n            }}\n          >\n            <span className=\"label\">{stat.label}</span>\n            <span className=\"percentage\">{stat.percentage}%</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport './FriendList.scss';\n\nconst FriendList = ({ friends }) => {\n  return (\n    <ul className=\"friend-list\">\n      {friends.map(friend => (\n        <li className=\"item\" key={friend.id}>\n          <span\n            className=\"status\"\n            style={\n              friend.isOnline ? { background: 'green' } : { background: 'red' }\n            }\n          ></span>\n          <img\n            className=\"avatar\"\n            src={friend.avatar}\n            alt={friend.name}\n            width=\"48\"\n          />\n          <p className=\"name\">{friend.name}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFriendList.propsTypes = {\n  friends: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default FriendList;\n","import PropTypes from 'prop-types';\nimport './TransactionHistory.scss';\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className=\"transaction-history\">\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map(item => {\n          return (\n            <tr key={item.id}>\n              <td>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</td>\n              <td>{item.amount}</td>\n              <td>{item.currency}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\nTransactionHistory.propsTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default TransactionHistory;\n","import './App.css';\nimport user from './components/Profile/user.json';\nimport Profile from './components/Profile/Profile';\nimport statisticalData from './components/Statistics/statistics-data.json';\nimport Statistics from './components/Statistics/Statistics';\nimport FriendList from './components/FriendList/FriendList';\nimport friends from './components/FriendList/friends.json';\nimport transactions from './components/TransactionHistory/transactions.json';\nimport TransactionHistory from './components/TransactionHistory/TransactionHistory';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}